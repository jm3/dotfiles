#!/usr/bin/env ruby
# jm3 + www.jm3.net + github.com/jm3 + twitter.com/jm3

require 'date'
require 'fileutils'

# i use IFTT (If This Then That) to automatically download my
# Instagrams + Instagram Likes to my Dropbox. The only problem is,
# IFTT uses a boneheaded date format that fucks up the alphabetical
# sorting, e.g. December (D) comes before January (j). Doh. this
# script renames the files according to a sane naming schema and
# it handles both your photos + your likes.

# your photos will be named like this:
# February_09__2014_at_0547PM_instagram.mine.jm3.Backgammoning.jpg
# => 2014-02-09 05.47pm instagram - Backgammoning.jpg

# your likes will be named like this:
# February_09__2014_at_0547PM_instagram.fave.sv4.Backgammoning.jpg
# => instagram fave 2014-02-09 05.47pm - sv4 - Backgammoning.jpg

# add whatever directories you want to process here. 
dirs = [
    "~/Dropbox/Photos/Instagrams",
    "~/Dropbox/Photos/Instagram Likes"
  ].map{ |d| File.expand_path d }

# You should not need to change anything below this line.

running_user = `whoami`.chomp

dirs.each do |dir|
  if File.directory? dir
    Dir.chdir dir
    Dir["*.jpg"].each do |insta|
      before = insta
      after = before.gsub( /__/, " - ")

      #              1     2      3          4       5       6      7        8      9     10
      parser = %r{([^_]+)_(\d+)__(\d{4})_at_(\d{4})([AP]M)_(\w+)\.([\w+]+)\.(\w+)\.(.*)\.(jpg)}
      # example filename generated by IFTT recipe:
      #  January_25__2014_at_0937PM_instagram.mine.jm3__yohjiyamamoto__y3_lights.jpg
      # February_15__2014_at_0218PM_instagram.fave.ldandersen.caption_whatever.jpg

      # formalplay.Pretty_good_Friday._I_m_allowing_myself_one" 9:".jpg

      tokens = parser.match( before )
      if tokens
        month   = Date::MONTHNAMES.index( tokens[1])
        month   = sprintf( "%02d", month ) # indexes are ints so zero-pad
        day     = tokens[2]
        year    = tokens[3]
        time    = tokens[4].gsub(/(\d{2})(\d{2})/, "\\1.\\2")
        am_pm   = tokens[5].downcase
        network = tokens[6]
        type    = tokens[7]
        user    = tokens[8]
        desc    = tokens[9].gsub(/_+/, ' ')
        ext     = "jpg"

        if user == running_user
          after  = [year, month, day].join( "-" ) + " #{time}pm - #{desc}.#{ext}"
        else
          after  = [year, month, day].join( "-" ) + " #{time}pm - @#{user} - #{desc}.#{ext}"
        end

        after.gsub!(/_+/, ' ')
        after.gsub!(/ - - /, ' - ')
        after.gsub!(/\.\./, '.')

        # IFTT suppresses a lot of the possible filename characters
        # (#, ', etc.), which means you'll often end up with filenames
        # with dozens of extra spaces; this cleans them up.
        after.gsub!(/  /, ' ')

        puts "mv '#{before}' '#{after}'"
        FileUtils.mv before, after
      else
        puts "Something went really wrong renaming #{before}"
      end
    end
  end
end
