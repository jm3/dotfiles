#!/usr/bin/env ruby
# The art of correct configuration.
#
# John Manoogian III * jm3 * 2013
#
# TODO: ST3 by default is named "Subl...xt", not "Subl...xt 3"; handle this

require 'fileutils'
require 'open-uri'
require 'rbconfig'
require 'date'
require 'getoptlong'

opts = GetoptLong.new(
  [ '--force',            '-f', GetoptLong::NO_ARGUMENT ],
  [ '--uninstall',        '-u', GetoptLong::NO_ARGUMENT ],
  [ '--no-personalize  ', '-n', GetoptLong::NO_ARGUMENT ]
)

# defaults
@cfg               = {}
@cfg[:bootstrap]   = ($PROGRAM_NAME == "-") ? true : false
@cfg[:home]        = "~"
@cfg[:dots]        = "~/.dotfiles"
@cfg[:personalize] = true
@cfg[:os]          = (
  case RbConfig::CONFIG['host_os']
    when /darwin|mac os/
      :macosx
    when /linux|solaris|bsd/
      :unix
    end
)
@cfg = @cfg.each{ |_,str| @cfg[_] = File.expand_path(str) if @cfg[_].class == String }

opts.each do |opt, arg|
  case opt
    when '--force'
      @cfg[:force] = true
    when '--no-personalize'
      @cfg[:personalize] = false
    when '--remove'
      puts "uninstalling"
      uninstall_dotfiles
    else
    end
end

def main
  restore_dir = Dir.getwd
  clone_repo
  install_git_friendly
  install_dotfiles
  personalize_git_env
  install_osx_goodies
  setup_vim
  ensure_zsh
  display_instructions
  FileUtils.cd restore_dir
end

# quick backup utility
def bup( file )
  return unless File.file? file or File.directory? file

  puts "Moving existing #{file} out of the way" unless file == ".ssh/config" # no output on ssh edge-case
  if File.file? "#{file}.old"
    FileUtils.rm_rf "/tmp/#{file}"
    return
  end
  FileUtils.mv file, "#{file}.old"
end

def clone_repo
  # do we have git?
  `which git`
  git_missing = ($?.to_i == 256) ? true : false
  if git_missing
    puts "Yo dawg! Please install git first!"
    exit
  end

  if File.directory? File.expand_path("~/.dotfiles/.git")
    FileUtils.cd @cfg[:dots]
    `git pull` unless ENV["USER"] == "jm3"
  else
    FileUtils.cd @cfg[:home]
    puts 'Fetching most recent dotfiles'
    puts `git clone "https://github.com/jm3/dotfiles.git" .dotfiles`
  end
end

def install_git_friendly
  # is git-friendly installed?
  `which pull`
  pull_missing = ($?.to_i == 256) ? true : false
  pull_path = `which pull`.chomp

  if pull_missing or pull_path != '/usr/local/bin/pull'
    if File.directory?('/usr/local') and File.writable?('/usr/local')
      puts 'Installing git-friendly'
      `curl -L https://raw.github.com/jamiew/git-friendly/master/install.sh | bash`
    else
      puts 'your system\'s /usr/local isn\'t writable by you; recommend you re-run this as sudo.'
    end
  end
end

def installable_dots
  breadcrumb = Dir.pwd
  FileUtils.cd "#{@cfg[:dots]}/dots"
  dots = Dir["*"].concat Dir[".*"]
  FileUtils.cd breadcrumb

  # skip non-installable stuff
  dots.select { |dot| !dot.match( /(\.$|\.git$|.git-vars.tmpl|.ssh_config|^osx$|\.DS_Store|\.swp)/)  }
end

def install_dotfiles
  dots = installable_dots
  FileUtils.cd @cfg[:home]

  dots.each do |dot|
    unless File.symlink?(dot) and File.readlink(dot) == ".dotfiles/dots/#{dot}"

      # remove anything blocking us from installing the new configs
      bup dot if( File.file?(dot) or File.directory?(dot)) and !File.symlink?(dot)
      FileUtils.rm dot if File.symlink?(dot) and File.readlink(dot) != ".dotfiles/dots/#{dot}"

      puts "Linking #{dot}"
      FileUtils.symlink ".dotfiles/dots/#{dot}", dot
    end
  end

  # bin dir doesn't live inside dots; link it separately
  unless File.symlink?("bin") and File.readlink("bin") == ".dotfiles/bin"
    bup "bin" if File.directory?("bin")
    FileUtils.rm "bin" if File.symlink?("bin") and File.readlink("bin") != ".dotfiles/bin"
    FileUtils.symlink ".dotfiles/bin", "bin"
  end

  # .ssh/config is another special case. the simple thing to do
  # would be to just version ~/.ssh/, but moving someone's .ssh
  # directory causes such a frightening series of errors that I'd
  # really rather not go there.
  FileUtils.mkdir_p ".ssh" unless File.directory?(".ssh")
  bup ".ssh/config"
  FileUtils.cd ".ssh"
  FileUtils.symlink( File.expand_path("~/.dotfiles/dots/.ssh_config"), "config") unless File.symlink?("config")
end

def uninstall_dotfiles
  FileUtils.cd @cfg[:home]
  installable_dots.each do |dot|
    if File.symlink?(dot) and File.readlink(dot) == ".dotfiles/dots/#{dot}"
      puts "rm'ing #{dot}"
      FileUtils.rm dot
    end
  end
  [".git-vars", ".zcompdump"].each do |unversioned_junk|
    if File.file?(unversioned_junk)
      puts "rm'ing #{unversioned_junk}"
      FileUtils.mv unversioned_junk, "/tmp/"
    end
  end
  FileUtils.rm ".ssh/config" if File.symlink?(".ssh/config")
end

def personalize_git_env
  return unless @cfg[:personalize]
  vars_file = "#{@cfg[:home]}/.git-vars"
  if @cfg[:bootstrap]
    # create the empty file so shells can source it without error;
    # we'll populate the file below, when `dots` is first run
    `touch #{vars_file}`
    return
  end

  git_name    = ENV["GIT_AUTHOR_NAME"]
  git_email   = ENV["GIT_AUTHOR_EMAIL"]
  github_user = ENV["GITHUB_USER"] # prolly could just use $USER, but why presume?

  return if git_name and git_email and github_user

  prompt =
  %Q[
I'm going to set up your .dotfiles for git. We'll prompt you for
a few quick things. No info will be sent anywhere; these are local
variables stored in your dotfiles so that git knows who you are
when it needs to work with your commits. Skip any prompt with <enter>
if you don't want to specify it.
  ]
  puts prompt

  unless git_name
    print "Your full name: "
    git_name = gets
    git_name = git_name.chomp
  end

  unless git_email
    print "Your email: "
    git_email = gets.chomp
  end

  unless github_user
    print "Your github username: "
    github_user = gets.chomp
  end

  FileUtils.cd @cfg[:home]
  FileUtils.cp "#{@cfg[:dots]}/dots/.git-vars.tmpl", vars_file
  `cat ~/.git-vars \
  | sed "s/__GIT_NAME__/#{git_name}/" \
  | sed "s/__GIT_EMAIL__/#{git_email}/" \
  | sed "s/__GITHUB_USER__/#{github_user}/" \
  > ~/.git-vars.tmp`
  FileUtils.mv ".git-vars.tmp", ".git-vars"

  puts %Q[
If anything below looks out of place, just edit ~/.git-vars.
Your changes won't conflict with anything in git.]
  puts `cat ~/.git-vars`
  puts %Q[

All set!

To finish, please run: source ~/.git-vars
  ]
end

def setup_vim
  # freshen existing plugins
  # clone new plugins from remote git repos
  # uninstall any plugins on disk no longer requested

  # build plugin name array
  @vim_bundle_repos = []
  File.open( File.expand_path("~/.vim/plugins.vim"), "r") do |f|
    f.each_line do |line|
      line.chomp!
      next if line.match( /^\s*(#|")/ ) or line.match( /^\s*$/ )
      @vim_bundle_repos.push line if line.match( /git:\/\// )
    end
  end

  FileUtils.mkdir_p "#{@cfg[:home]}/.vim/bundle" unless File.directory? "#{@cfg[:home]}/.vim/bundle"
  FileUtils.cd "#{@cfg[:home]}/.vim/bundle"

  # check out how much time has passed since the last freshen
  last_freshened = "last_freshened"
  days_ago = 0
  if File.file? last_freshened
    days_ago = (Date.today - Date.parse(File.ctime(last_freshened).to_s)).to_i
  end

  # bail if we've recently refreshed plugins
  if @cfg[:force] or !File.file? last_freshened or days_ago > 7
    puts "Vim bundles last freshened #{days_ago} days ago; freshening"
  else
    puts "Vim plugins last checked about #{days_ago} days ago; no need to re-check today."
    puts "\ndots --force to force an update"
    return
  end

  `touch #{last_freshened}`

  @vim_bundle_repos.each do |url|
    dir = url.split('/').last.sub(/\.git$/, '')
    if File.directory?(dir)
      FileUtils.cd(dir)
      puts "Freshening vim plugin #{dir}"
      `git pull`
      FileUtils.cd("..")
    else
      puts "Cloning new vim plugin #{dir}"
      `git clone #{url} #{dir}`
    end
  end

  # extract just the bundle name
  @vim_bundle_repos.each{|d| d.gsub!(/git:\/\/\w+.com\/[\w-]+\/([\w\.-]+)$/, "\\1")}

  # rm unused plugins
  Dir["*"].each do |file_item|
    unless @vim_bundle_repos.include?( file_item ) or File.file? file_item
      puts "Removing unused vim plugin #{file_item}"
      FileUtils.rm_rf file_item
    end
  end

  # keep vim backup files in a single locaiton, not sprayed everywhere
  # if the directory is deleted, backups will be saved in vim's
  # standard backup savepath
  FileUtils.mkdir_p "#{@cfg[:home]}/.vim/backups"

  FileUtils.cd @cfg[:home]
end

def install_osx_goodies
  return unless @cfg[:os] == :macosx

  def install_goodies
    setup_iterm
    setup_sublime_text(2)
    setup_sublime_text(3)
  end

  def setup_iterm
    return unless File.directory? "/Applications/iTerm.app"
    plist     = 'com.googlecode.iterm2.plist'
    iterm_cfg = "#{@cfg[:home]}/Library/Preferences/#{plist}"

    FileUtils.cd "#{@cfg[:dots]}/osx/iterm"

    %x[diff #{iterm_cfg} #{plist}]
    response = $?

    # if the installed iterm cfg is identical from what we have in
    # the repo, we're up to date:
    return if response.exitstatus == 0

    if File.file? iterm_cfg
      bup iterm_cfg
    end

    FileUtils.rm_rf iterm_cfg

    # get a clean copy from source
    `git checkout #{plist}`

    # iterm auto-converts the xml to apple's binary plist format on save
    FileUtils.cp "#{@cfg[:dots]}/osx/iterm/#{plist}", "#{@cfg[:dots]}/osx/iterm/#{plist}.orig"

    puts 'Personalizing your iTerm preferences file'
    `plutil -convert xml1 -o /dev/stdout #{plist}.orig | sed 's/jm3/#{ENV["USER"]}/g' | plutil -convert binary1 -o #{@cfg[:dots]}/osx/iterm/#{plist} -`
    FileUtils.rm_rf "#{@cfg[:dots]}/osx/iterm/#{plist}.orig"

    puts 'Linking iTerm preferences'
    # note that we do a HARD link; iTerm doesn't play nice with symlinks
    `ln #{@cfg[:dots]}/osx/iterm/#{plist} #{iterm_cfg}`
  end

  def setup_sublime_text(version)
    return unless version and
      File.directory? "/Applications/Sublime Text #{version}.app"

    subl_settings_dir = File.expand_path "~/Library/Application Support/Sublime Text #{version}/Packages/"
    FileUtils.mkdir_p subl_settings_dir unless File.directory? subl_settings_dir
    FileUtils.cd subl_settings_dir
    link_point = "User"
    return if File.symlink?(link_point) and File.readlink(link_point) == "#{@cfg[:dots]}/osx/st#{version}"

    if File.directory? link_point
      FileUtils.mv 'old-configs.tgz', '/tmp/' if File.file? 'old-configs.tgz'
      puts "Archiving old Sublime Text configs"
      puts `tar cvz #{link_point} > old-configs.tgz`
    end
    FileUtils.rm_rf link_point
    puts "Linking Sublime Text configs"
    FileUtils.symlink "#{@cfg[:dots]}/osx/st#{version}", link_point
  end

  install_goodies

end

def ensure_zsh
  shell = ENV["SHELL"]
  zsh_installed  = `which zsh`.chomp
  brew_installed = `which brew`.chomp

  unless shell.match( /zsh/ )
    puts "Your shell isn't Zsh which means you're missing some cool features."

    if zsh_installed
      puts "To correct your shell settings, just run: chsh"
      puts "and at the prompt, enter #{zsh_installed}"
    else
      puts "Zsh is easy to install"
      if brew_installed
        puts "Just run: brew install zsh"
      else
        puts "The easiest way to install Zsh on a mac is Homebrew: http://brew.sh/"
      end
    end
  end
end

def display_instructions
  if @cfg[:bootstrap]
    puts 'Run this command to complete setup: "~/bin/dots" (no quotes)'
  end
end

main
